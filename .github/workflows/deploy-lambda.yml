name: Deploy Lambdas

on:
  push:
    branches:
      - main
    paths:
      - 'lambda/go/**'
  workflow_dispatch:
    inputs:
      lambda_path:
        description: 'Ruta de la Lambda a construir'
        required: true
        default: 'lambda/go/lambda1-aws-lambda'
      go_version:
        description: 'Versión de Go a usar'
        required: true
        default: '1.24'

env:
  LAMBDA_PATH: ${{ github.event.inputs.lambda_path || 'lambda/go/lambda1-aws-lambda' }}

jobs:
  deploy_lambda:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ github.event.inputs.go_version || '1.24' }}

      - name: Validar nombre de Lambda
        run: |
          if [[ ! "$LAMBDA_PATH" =~ -aws-lambda$ ]]; then
            echo "Error: La ruta de la Lambda debe terminar con '-aws-lambda'. Ruta: $LAMBDA_PATH"
            exit 1
          fi
          echo "Ruta de Lambda válida: $LAMBDA_PATH"

      - name: Validar existencia de main.go
        run: |
          if [ ! -f "$LAMBDA_PATH/cmd/main.go" ]; then
            echo "No se encontró main.go en $LAMBDA_PATH"
            exit 1
          fi

      - name: Obtener nombre base de la Lambda
        id: extract_name
        run: |
          name=$(basename "$LAMBDA_PATH" | sed 's/-aws-lambda//')
          echo "lambda_name=$name" >> $GITHUB_OUTPUT

      - name: Build Lambda
        run: |
          cd $LAMBDA_PATH
          GOOS=linux GOARCH=amd64 go build -o main .
          zip function.zip main

      - name: Mover ZIP a carpeta Terraform
        run: |
          lambda_name="${{ steps.extract_name.outputs.lambda_name }}"
          cp "$LAMBDA_PATH/function.zip" "terraform/lambda/$lambda_name/function.zip"

      - name: Deploy con Terragrunt
        run: |
          lambda_name="${{ steps.extract_name.outputs.lambda_name }}"
          cd terragrunt/lambda/$lambda_name
          terragrunt init
          terragrunt apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
